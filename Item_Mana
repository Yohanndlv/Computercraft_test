-- Trouver le premier coffre (celui qui a le numéro le plus bas)
local chests = {}
local firstChest
local lastChest
local unclassifiedChest

-- Récupérer tous les coffres
for _, name in ipairs(peripheral.getNames()) do
    local pType = peripheral.getType(name)
    if pType == "minecraft:chest" then
        table.insert(chests, peripheral.wrap(name))
    end
end

-- Trier les coffres par nom pour trouver le premier (le plus bas)
table.sort(chests, function(a, b)
    return a.getName() < b.getName()
end)

firstChest = chests[1] -- Premier coffre (celui où les objets sont déposés)
unclassifiedChest = chests[28] -- Le 28ème coffre pour les objets non triés

-- Générer une table de mapping pour les lettres A-Z
local chestMap = {}
for i = 1, 26 do
    chestMap[string.char(64 + i)] = chests[i + 1] -- Assigner A à Z dans les coffres suivant le 1er
end

-- Fonction pour trier les objets dans le coffre
local function sortItems()
    local items = firstChest.list()

    for slot, item in pairs(items) do
        local firstLetter = item.name:sub(1, 1):upper() -- Première lettre de l'objet

        -- Chercher le coffre correspondant à la première lettre
        local targetChest = chestMap[firstLetter]

        if targetChest then
            -- Essayer de déposer l'item dans le coffre ciblé
            for i = 1, targetChest.size() do
                if not targetChest[i] then
                    targetChest[i] = item
                    firstChest[slot] = nil -- Retirer l'item du premier coffre
                    break
                end
            end
        else
            -- Si aucun coffre spécifique, déplacer l'objet vers le coffre non trié
            for i = 1, unclassifiedChest.size() do
                if not unclassifiedChest[i] then
                    unclassifiedChest[i] = item
                    firstChest[slot] = nil -- Retirer l'item du premier coffre
                    break
                end
            end
        end
    end
end

-- Fonction pour vérifier et trier en boucle
while true do
    sortItems()
    sleep(1) -- Attendre avant de vérifier à nouveau
end
