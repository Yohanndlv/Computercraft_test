-- Détecter tous les coffres connectés et récupérer leur nom
local chests = {}
local chestNames = {}
for _, name in ipairs(peripheral.getNames()) do
    local pType = peripheral.getType(name)
    if pType == "minecraft:chest" then
        -- Enregistrer à la fois le périphérique et son nom
        table.insert(chests, peripheral.wrap(name))
        table.insert(chestNames, name)  -- Ajouter le nom du périphérique à une liste séparée
    end
end

-- Fonction pour trier les items par ordre alphabétique
local function getSortedItems()
    local items = {}
    
    -- Récupérer les items de tous les coffres
    for _, chest in ipairs(chests) do
        local chestItems = chest.list()
        for slot, item in pairs(chestItems) do
            table.insert(items, {name = item.name, count = item.count, slot = slot, chest = chest})
        end
    end
    
    -- Trier les items par nom
    table.sort(items, function(a, b)
        return a.name < b.name
    end)
    
    return items
end

-- Fonction pour redistribuer les items triés dans les coffres
local function distributeItems(sortedItems)
    local currentChestIndex = 1
    local currentChest = chests[currentChestIndex]
    
    for _, item in ipairs(sortedItems) do
        -- Récupérer les détails de l'item du coffre actuel
        local currentSlot = currentChest.getItemDetail(item.slot)
        
        -- Vérifier si l'item peut être ajouté au coffre
        if currentSlot then
            -- Calculer l'espace libre dans le slot
            local freeSpace = 64 - currentSlot.count  -- La capacité maximale d'un slot est 64
            local transferCount = math.min(item.count, freeSpace)
            if transferCount > 0 then
                -- Transférer les items
                currentChest.pushItems(chestNames[item.chest], item.slot, transferCount)
                item.count = item.count - transferCount
            end
        else
            -- Si le slot est vide, ajouter l'item
            local transferCount = math.min(item.count, 64)  -- Un slot peut contenir jusqu'à 64 items
            if transferCount > 0 then
                currentChest.pushItems(chestNames[item.chest], item.slot, transferCount)
                item.count = item.count - transferCount
            end
        end

        -- Passer au coffre suivant si nécessaire
        if item.count > 0 then
            currentChestIndex = currentChestIndex + 1
            if currentChestIndex <= #chests then
                currentChest = chests[currentChestIndex]
            else
                break
            end
        end
    end
end

-- Fonction principale de tri et de distribution
local function sortAndDistribute()
    -- Récupérer les items triés
    local sortedItems = getSortedItems()

    -- Distribuer les items entre les coffres
    distributeItems(sortedItems)
end

-- Exécuter le tri et la distribution des items
sortAndDistribute()
