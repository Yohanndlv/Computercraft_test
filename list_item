local monitor
local chests = {}
local content = {}
local scroll = 0
local selectedItem = nil
local selectedChest = nil

-- Trouver le monitor et les coffres
for _, name in ipairs(peripheral.getNames()) do
    local pType = peripheral.getType(name)
    if pType == "monitor" then
        monitor = peripheral.wrap(name)
    elseif pType == "minecraft:chest" then
        table.insert(chests, peripheral.wrap(name))
    end
end

if not monitor then
    print("Aucun monitor trouvé.")
    return
end

monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)

local w, h = monitor.getSize()
local viewHeight = h
local maxScroll = 0

-- Fonction pour trier les objets par nom ou par quantité
local function sortItems(chest, by)
    local items = chest.list()
    local sortedItems = {}

    for slot, item in pairs(items) do
        table.insert(sortedItems, {slot = slot, name = item.name, count = item.count})
    end

    -- Trier par nom ou par quantité
    if by == "name" then
        table.sort(sortedItems, function(a, b) return a.name < b.name end)
    elseif by == "count" then
        table.sort(sortedItems, function(a, b) return a.count > b.count end)
    end

    return sortedItems
end

-- Générer le contenu des coffres avec un tri
local function generateContent(sortBy)
    content = {}
    for i, chest in ipairs(chests) do
        table.insert(content, "Coffre #" .. i)
        local sortedItems = sortItems(chest, sortBy)
        for _, item in ipairs(sortedItems) do
            table.insert(content, item.name .. " - " .. item.count .. "x")
        end
        table.insert(content, "") -- ligne vide
    end
    maxScroll = math.max(0, #content - viewHeight + 1)
end

-- Dessiner le contenu visible
local function draw()
    monitor.clear()
    for i = 1, viewHeight do
        local line = content[i + scroll]
        if line then
            monitor.setCursorPos(1, i)
            monitor.write(line:sub(1, w - 2)) -- laisser place au slider
        end
    end

    -- Dessiner le slider
    local sliderHeight = math.max(1, math.floor(viewHeight * (viewHeight / #content)))
    local sliderPos = math.floor((scroll / maxScroll) * (viewHeight - sliderHeight)) + 1

    for i = 1, viewHeight do
        monitor.setCursorPos(w, i)
        if i >= sliderPos and i < sliderPos + sliderHeight then
            monitor.write("|")
        else
            monitor.write(" ")
        end
    end
end

-- Détection du clic sur un item pour le sélectionner et le déplacer
local function handleTouch(x, y)
    if x == w then
        -- clic sur le slider
        local ratio = (y - 1) / (viewHeight - 1)
        scroll = math.floor(ratio * maxScroll + 0.5)
        draw()
    else
        -- Si on clique sur un item, sélectionner cet item
        local index = scroll + y
        if content[index] then
            local itemText = content[index]
            if not selectedItem then
                selectedItem = itemText
                monitor.setCursorPos(1, h)
                monitor.write("Sélectionné : " .. selectedItem)
            else
                -- Si un objet est déjà sélectionné, proposer le déplacement
                if selectedChest then
                    -- Déplacer l'objet vers un autre coffre
                    for _, chest in ipairs(chests) do
                        if chest == selectedChest then
                            local items = chest.list()
                            for slot, item in pairs(items) do
                                if item.name == selectedItem then
                                    chest.pushItem(slot, 1)
                                    break
                                end
                            end
                        end
                    end
                end
                selectedItem = nil -- Désélectionner l'objet après le mouvement
            end
        end
    end
end

-- Initialisation
generateContent("name")  -- Initialiser avec un tri par nom
draw()

-- Boucle d’écoute des événements tactiles
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    handleTouch(x, y)
end
