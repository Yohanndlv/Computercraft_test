-- Fonction pour récupérer les coffres par leur numéro
local function getChestByNumber(num)
    local chestNames = peripheral.getNames()
    return peripheral.wrap(chestNames[num])
end

-- Fonction pour obtenir la première lettre d'un objet
local function getFirstLetter(itemName)
    return itemName:sub(1, 1):upper()  -- Première lettre en majuscule
end

-- Fonction pour trier les objets par ordre alphabétique
local function sortItems()
    -- Récupérer le coffre de dépôt et les autres coffres
    local depositChest = getChestByNumber(1)  -- Coffre de dépôt
    local chests = {}
    for i = 2, 28 do  -- Coffres 2 à 27 pour A-Z et 28 pour "Non triés"
        chests[i] = getChestByNumber(i)
    end

    -- Récupérer tous les items du coffre de dépôt
    local items = depositChest.list()

    -- Trier les items et les envoyer dans les coffres appropriés
    for _, item in pairs(items) do
        local firstLetter = getFirstLetter(item.name)

        -- Si la première lettre est entre A et Z
        if firstLetter >= "A" and firstLetter <= "Z" then
            local chestIndex = string.byte(firstLetter) - string.byte("A") + 2  -- Les coffres commencent à l'index 2 pour A
            local chest = chests[chestIndex]
            -- Trouver un emplacement libre dans le coffre
            local slot = chest.getFreeSlot()
            if slot then
                chest.pushItems(1, item.count, slot)
            end
        else
            -- Sinon, les objets vont dans le coffre "Non triés" (coffre 28)
            local chest = chests[28]
            local slot = chest.getFreeSlot()
            if slot then
                chest.pushItems(1, item.count, slot)
            end
        end
    end
end

-- Boucle infinie pour exécuter le tri à intervalle régulier
while true do
    sortItems()
    print("Tri effectué ! En attente du prochain cycle...")
    sleep(30)  -- Attendre 30 secondes avant de refaire un tri (ajustable)
end
