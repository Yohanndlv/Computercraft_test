local monitor
local chests = {}
local content = {}
local scroll = 0

-- Trouver le monitor et les coffres
for _, name in ipairs(peripheral.getNames()) do
    local pType = peripheral.getType(name)
    if pType == "monitor" then
        monitor = peripheral.wrap(name)
    elseif pType == "minecraft:chest" then
        table.insert(chests, peripheral.wrap(name))
    end
end

if not monitor then
    print("Aucun monitor trouvé.")
    return
end

monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)

local w, h = monitor.getSize()
local viewHeight = h
local maxScroll = 0

-- Fonction pour générer et trier les objets dans tous les coffres
local function generateContent()
    content = {}
    local allItems = {}

    -- Récupérer tous les objets
    for i, chest in ipairs(chests) do
        local items = chest.list()
        for slot, item in pairs(items) do
            table.insert(allItems, {name = item.name, count = item.count, chest = i, slot = slot})
        end
    end

    -- Tri des objets par nom
    table.sort(allItems, function(a, b)
        return a.name < b.name
    end)

    -- Réorganiser les objets dans les coffres
    local newChestContents = {}
    for _, item in ipairs(allItems) do
        if not newChestContents[item.chest] then
            newChestContents[item.chest] = {}
        end
        table.insert(newChestContents[item.chest], {name = item.name, count = item.count})
    end

    -- Remplir les coffres avec les objets triés
    for i, chest in ipairs(chests) do
        -- Vider le coffre actuel (si nécessaire)
        chest.pushItems(i, 64, 1)  -- Ajuste la logique si tu veux vider d'abord les coffres

        -- Déplacer les items triés dans le coffre
        for _, item in ipairs(newChestContents[i] or {}) do
            -- Cherche une slot vide
            local emptySlot = chest.getSlotEmpty()  -- Si la méthode getSlotEmpty() est supportée

            if emptySlot then
                chest.pushItems(i, item.count, item.slot)
            else
                -- Gestion si plus de place
                print("Pas assez de place dans le coffre #" .. i)
            end
        end
    end

    -- Remplir la table `content` pour l'affichage
    for i, chest in ipairs(chests) do
        table.insert(content, "Coffre #" .. i)
        local items = chest.list()
        for _, item in pairs(items) do
            table.insert(content, "- " .. item.count .. "x " .. item.name)
        end
        table.insert(content, "") -- ligne vide
    end
    maxScroll = math.max(0, #content - viewHeight + 1)
end

-- Dessiner le contenu visible sur le monitor
local function draw()
    monitor.clear()
    for i = 1, viewHeight do
        local line = content[i + scroll]
        if line then
            monitor.setCursorPos(1, i)
            monitor.write(line:sub(1, w - 2)) -- laisser place au slider
        end
    end

    -- Dessiner le slider
    local sliderHeight = math.max(1, math.floor(viewHeight * (viewHeight / #content)))
    local sliderPos = math.floor((scroll / maxScroll) * (viewHeight - sliderHeight)) + 1

    for i = 1, viewHeight do
        monitor.setCursorPos(w, i)
        if i >= sliderPos and i < sliderPos + sliderHeight then
            monitor.write("|")
        else
            monitor.write(" ")
        end
    end
end

-- Gestion du clic sur le slider
local function handleTouch(x, y)
    if x == w then
        -- calcul du scroll en fonction du clic sur le slider
        local ratio = (y - 1) / (viewHeight - 1)
        scroll = math.floor(ratio * maxScroll + 0.5)
        draw()
    end
end

-- Initialisation
generateContent()
draw()

-- Boucle d’écoute des événements tactiles
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    handleTouch(x, y)
end
